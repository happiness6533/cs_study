포인터


# 뜻1 : 포인터 = 주소를 저장하는 변수
int a = 1
int *ptr1 = &a

int array[3] = {1, 2, 3}
int (*ptr2)[3] = &array


# 뜻2 : *포인터 = 포인터에 저장된 주소가 가르키는 값을 리턴
*ptr1 = 1
*ptr2 = {1, 2, 3}


# 포인터의 연산
ptr + 1 = 포인터에 저장된 주소 + 주소가 가르키는 값의 크키 = 다음 주소를 리턴
ptr + i = 포인터에 저장된 주소 + 주소가 가르키는 값의 크기 * i = 다음 주소를 리턴

*(ptr + 1) = 다음 주소가 가르키는 값을 리턴
*(ptr + i) = 다음 주소가 가르키는 값을 리턴


# 배열
array = 0번째 인덱스의 값을 가르키는 주소를 리턴(주의 : 배열이 아니다 / 주소다)
array[i] = i번째 인덱스의 값을 리턴


# 포인터와 배열1
(*ptr2)[i] = 포인터에 저장된 주소가 가르키는 배열의 i번째 인덱스의 값


# 포인터와 배열2
뜻 : *ptr3 = array = 0번째 인덱스의 값을 가르키는 주소를 리턴해서 포인터에 저장

(ptr3 + 1) = 다음 주소를 리턴 = 1번째 인덱스의 값의 주소를 리턴
(ptr3 + i) = 다음 주소를 리턴 = i번째 인덱스의 값의 주소를 리턴

*(ptr3 + 1) = 다음 주소가 가르키는 값을 리턴 = 1번째 인덱스의 값의 주소가 가르키는 값을 리턴
*(ptr3 + i) = 다음 주소가 가르키는 값을 리턴 = i번째 인덱스가 값의 주소가 가르키는 값을 리턴

(array + 1) = 다음 주소를 리턴 = 1번째 인덱스의 값의 주소를 리턴
(array + i) = 다음 주소를 리턴 = i번째 인덱스의 값의 주소를 리턴

*(array + 1) = 다음 주소가 가르키는 값을 리턴 = 1번째 인덱스의 값의 주소가 가르키는 값을 리턴
*(array + i) = 다음 주소가 가르키는 값을 리턴 = i번째 인덱스가 값의 주소가 가르키는 값을 리턴

모양 : ptr3[i] = array[i]


# 포인터와 배열3
char str[3] = "abc"
printf("%s", str) = printf("%s", &str[0])
%s : 배열의 0번째 인덱스를 가르키는 주소가 가르키는 값부터 null문자를 만나기 전까지 출력