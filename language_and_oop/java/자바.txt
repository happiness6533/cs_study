//캐릭터 설정방법 : 퍼블릭 + 클래스 + 캐릭터이름 {캐릭터 설명}
public class Card {
//속성 설정방법 : 퍼블릭/프로텍티드/기본/프라이빗 + (파이널 - 생성시 존재하는 모든 캐릭터 절대불변/스테틱 - 생성시 존재하는 모든 캐릭터 변동적용) + (클래스/기본형) + 속성이름;
//특수스킬 생성 설정방법 : 퍼블릭 + 생성할클래스(파라미터) {스킬내용}
//일반스킬 설정방법 : 퍼블릭/프로텍티드/기본/프라이빗 + (파이널/스테틱) + 리턴할 (클래스/기본형) + 스킬이름(파라미텨) {스킬내용};

    //캐릭터 카드 - (어떤 속성들이 있는지)속성 설정(만)
    public final int suitNumber;
    public final int rankNumber;

    //캐릭터 카드 - (어떤 속성들이 있는지)스킬 설정(만)
    //특수스킬.카드생성
    public Card(int suitNumber, int rankNumber) {
        this.suitNumber = suitNumber;
        this.rankNumber = rankNumber;
    }

    //일반스킬1.수트 보여주기
    public String getSuit() {
        switch (this.suitNumber) {
            case 1:
                return "Clubs";
            case 2:
                return "Hearts";
            case 3:
                return "Diamonds";
            case 4:
                return "Spades";
            default:
                return null;
        }
    }

    //일반스킬2.랭크 보여주기
    public String getRank() {
        switch (this.rankNumber) {
            case 1:
                return "Ace";
            case 11:
                return "Jackk";
            case 12:
                return "Queen";
            case 13:
                return "King";
            default:
                return String.valueOf(rankNumber);
        }
    }

    //일반스킬3.문자로 나타내기
    public String toString(){
        return getRank() + " of " + this.getSuit();
    }
}



파이널 : 캐릭터를 계속 추가생성하면 / 생성된 캐릭터마다 새로운 메모리가 할당되지만 / 똑같은 값으로 저장되는 / 불변의 값
스태틱 : 캐릭터를 계속 추가생성해도 / 생성된 캐릭터 모두 하나의 메모리를 공유하기 때문에 / 바꾸면 모든 캐릭터가 다 바뀌는 / 공유의 값
파이널 스태틱 : 새로운 캐릭터가 생성되도 하나의 메모리에 공유된, 그리고 절대 바뀌지 않을, 불변의 공유값



상속 : 메소드를 상속받을때 메소드를 그대로 상속받아야 한다(변수랑 메소드만)
(제네릭을 쓰면 상속도 중첩할 수 있다)

인터페이스 : 빈 메소드 이름만 공유/의무상속을 약속하고 실제 메소드는 달리 할 수 있다(추상메소드만)
(숨어있는 특수인터페이스 컴페어러블이 있다)

추상클래스 : 상속 인터페이스 다 동시에 쓰고싶으면 이걸 쓰자(변수 메소드 추상메소드)
(추상클래스를 상속받는 여러 클래스를 일일히 만들지 않고 바로 main파일에서 인스턴스가 생성되도록 할 수 있다)








/*
    클래스 만들기

    public = 다른곳에서 사용 가능
    private = 다른곳에서 사용 불가능(게터, 세터함수로 값에 접근할 수 있다)

    final
    >> 클래스 정의 >> 클래스 10개 생성 >> 메모리 공간 10개 할당 >> 변수공간 10개 생성
    >> 변수공간 10개에 할당하는 값이 항상 일정

    static
    1. 임의의 클래스 x 내부에 static 변수 y를 정의하면
    >> 클래스 x 정의
    >> 메모리 공간 1개 할당
    >> 변수공간 y 1개 지정(클래스 x를 생성하지 않아도, y가 정의만 되어있다면, 변수공간이 이미 생성되어 있으며, y를 사용할 수 있다)
    >> 메인 함수에서 클래스 10개 생성
    >> 이미 생성되어 있는 변수공간 1개에, 할당되는 y값을 매번 덮어쓴다

    2. 임의의 클래스 x 내부에 static 변수 y(클래스, 메소드, 변수 모두 포함)를 정의하면
    >> 클래스 x를 생성하지 않아도, y가 정의만 되어있다면, 클래스든, 메소드든, 변수든, y를 사용할 수 있다

    3. public static void main()에 대한 의문?
    >> 임의의 클래스 x안에 정의된 static 클래스 y : x를 생성하지 않아도 y를 쓸 수 있다
    >> 임의의 클래스 x안에 정의된 static 변수 y : x를 생성하지 않아도 y를 쓸 수 있다
    >> 임의의 클래스 x안에 정의된 static 메소드 y : x를 생성하지 않아도 y를 쓸 수 있고
    + static 메소드는 static 변수만 사용할 수 있으며
    + 메인 실행 메소드인 public static void main은 static 메소드 이므로 static 변수만 쓸 수 있으니까
    + 모든 클래스는 기본적으로 스태틱이다???

    static final
    >> 객체 10개 생성 >> 메모리 공간 1개 할당 >> 변수 1개 생성 >> 생성하는 값이 일정하다

    클래스 이름
    */












/*
        compareTo 메소드 사용하기
        >> 우선 implements Comparable<정렬하고 싶은 클래스>
        >> 이제 compareTo(기준 클래스) 메소드 사용가능
        >> 기준 클래스 1개를 정수 0으로 생각하고
        >> 다른 클래스를 상대적인 정수값으로 리턴해서
        >> 음수부터 양수까지 순서대로 클래스를 정렬하고 싶을 때 쓴다
        >> 정의 후 사용법 = .sort(정렬하고 싶은 클래스가 들어있는 자료구조);

        @Override
        public int compareTo(classTime o) {
            return end - o.end;
        }
        */






        /*
        Comparator 사용하기
        >> 우선 생성자로 생성
        >> 이제 compare(클래스 2개) 메소드 사용가능
        >> 클래스 2개를 비교해서 각 상태를 정수값으로 리턴하고
        >> 음수부터 양수까지 순서대로 두 클래스의 정렬상태를 정하고 싶을 때 쓴다
        >> 생성 후 사용법 = .sort(정렬하고 싶은 클래스가 들어있는 자료구조, 생성한 Comparator);
        */